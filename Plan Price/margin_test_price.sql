DECLARE @QTY_RATIO as DECIMAL(19,2)
DECLARE @PLAN_PRICE_RATIO as DECIMAL(19,2)
DECLARE @NOC_RATE as DECIMAL(19,2)
DECLARE @TARGET_DATE as date
DECLARE @ITEMNO as int
DECLARE @CHANNEL as VARCHAR(50)
DECLARE @COUNTRY as VARCHAR(50)

SET @ITEMNO = 10032485
SET @QTY_RATIO = -0.1
SET @PLAN_PRICE_RATIO = 0.2
SET @TARGET_DATE = '2025-02-01'
SET @CHANNEL = 'ShopWe'
SET @COUNTRY = 'DE'

@NOC_RATE = 

truncate table L1.[L1_FACT_F_BUSINESS_PLAN_KPI_CALCULATION] --where CD_SOURCE = @source



	;WITH CTE_LICENSES AS (
	SELECT 
		item.[ID_ITEM]
		,[D_VALID_FROM]
		,[D_VALID_TO]
		,MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'GEMA PL'          THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END)				AS [GEMA PL] 
		,MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'AIRTAG'           THEN ISNULL(VL_LICENSE_RATE,1) * ISNULL(PCT_LICENSE,1) END)	AS AIRTAG 
		,ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY   WHEN 'VIA'              THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		+ ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'Vectis'           THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)	AS AMT_PRODUCT_LICENSES_EST_PRECAL_USD
		,  ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY  WHEN 'Kasettenrekorder' THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'Others'           THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'Nokia'            THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'Sisvel'           THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'CD-Rekorder'      THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'TV'               THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) END),0)
		 + ISNULL(MAX(CASE CD_LICENSE_SUBCATEGORY WHEN 'MP3-Player'       THEN VL_LICENSE_RATE * ISNULL(PCT_LICENSE,1) End),0)	AS AMT_PRODUCT_LICENSES_EST_PRECAL_EUR
	FROM [L1].[L1_DIM_A_PL_ENVIRO_LICENSES] el
	LEFT JOIN L1.L1_DIM_A_ITEM item
		ON el.CD_ITEM = item.NUM_ITEM 
   	GROUP BY item.[ID_ITEM],[D_VALID_FROM],[D_VALID_TO]
   )
  ,PACKAGING_FRA as 
  ( 
  SELECT 
		cd_enviro_category
		,cd_cost_type
		,[D_VALID_FROM]
		,[D_VALID_TO]
		,MAX(CASE cd_raw_material_type   WHEN 'Other plastics excluding PVC' THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)
		 + MAX(CASE cd_raw_material_type WHEN 'Other plastics including PVC' THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)
		 + MAX(CASE cd_raw_material_type WHEN 'Paper'                        THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)
		 + MAX(CASE cd_raw_material_type WHEN 'Rigid PE, PP or PET'          THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)
		 + MAX(CASE cd_raw_material_type WHEN 'Rigid PS'                     THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)
		 + MAX(CASE cd_raw_material_type WHEN 'Soft PE'                      THEN AMT_PACKAGING_PRICE_EUR * ISNULL(VL_PACKAGING_PROPORTION_RATE,1) END)	AS AMT_COST_PER_MATERIAL
		,MIN(VL_CSU_FEE) as VL_CSU_FEE
  FROM [L1].[L1_DIM_A_PL_ENVIRO_PACKAGING] el
  WHERE cd_enviro_category='PAC_FRA' and cd_cost_type='POM'	 	
  GROUP BY cd_enviro_category,cd_cost_type,[D_VALID_FROM],[D_VALID_TO]
),
CTE_CS_PAYMENTS AS (
		select D_VALID_FROM,D_VALID_TO,CD_CHANNEL_GROUP_3, AVG(PCT_PAYMENTS_ORDER)PCT_PAYMENTS_ORDER
		from  [L1].[L1_DIM_A_CS_PAYMENTS] cspayment
		INNER JOIN L1.L1_DIM_A_SALES_CHANNEL ch
			on ch.ID_SALES_CHANNEL = cspayment.ID_SALES_CHANNEL
		GROUP BY
			D_VALID_FROM,D_VALID_TO,CD_CHANNEL_GROUP_3
),

CTE_DAILY_COSTS AS
(
				select 
				month(D_EFFECTIVE) [MONTH]
				,year(D_EFFECTIVE) [YEAR]
				      ,CAST(SUM([AMT_DEMURRAGE_DETENTION_EUR]) as DECIMAL(19,8))[AMT_DEMURRAGE_DETENTION_EUR]
					  ,CAST(SUM([AMT_DEADFREIGHT_EUR])as DECIMAL(19,8))[AMT_DEADFREIGHT_EUR]
					  ,CAST(SUM([AMT_KICKBACKS_EUR])as DECIMAL(19,8))[AMT_KICKBACKS_EUR]
					  ,CAST(SUM([AMT_3RD_PARTY_SERVICES_EUR]) as DECIMAL(19,8))[AMT_3RD_PARTY_SERVICES_EUR]
					  ,CAST(SUM([AMT_RETURN_MERCHANDISE_AUTHORIZATION_EUR])as DECIMAL(19,8))[AMT_RETURN_MERCHANDISE_AUTHORIZATION_EUR]
					  ,CAST(SUM([AMT_SAMPLES_EUR])as DECIMAL(19,8))[AMT_SAMPLES_EUR]
					  ,CAST(SUM([AMT_OTHER_COGS_EFFECT_EST_EUR])as DECIMAL(19,8))[AMT_OTHER_COGS_EFFECT_EST_EUR]
					  ,CAST(SUM([AMT_DROPSHIPMENT_CEOTRA9ER_EST_EUR])as DECIMAL(19,8))[AMT_DROPSHIPMENT_CEOTRA9ER_EST_EUR]
					  ,CAST(SUM([AMT_INBOUND_FREIGHT_COST_EST_EUR])as DECIMAL(19,8))[AMT_INBOUND_FREIGHT_COST_EST_EUR]
					  ,CAST(SUM([AMT_PO_CANCELLATION_EUR])as DECIMAL(19,8))[AMT_PO_CANCELLATION_EUR]
					  ,CAST(SUM([AMT_STOCK_ADJUSTMENT_EUR])as DECIMAL(19,8))[AMT_STOCK_ADJUSTMENT_EUR]
					  ,CAST(SUM([AMT_FX_HEDGING_IMPACT_EST_EUR])as DECIMAL(19,8))[AMT_FX_HEDGING_IMPACT_EST_EUR]
					  ,CAST(SUM([AMT_COGS_STOCK_VALUE_ADJUSTMENT_EST_EUR])as DECIMAL(19,8))[AMT_COGS_STOCK_VALUE_ADJUSTMENT_EST_EUR]
				from  L1.L1_FACT_F_DAILY_COSTS costs
				where 
				  year(D_EFFECTIVE) = 2024
				GROUP BY 
				month(D_EFFECTIVE)
				,year(D_EFFECTIVE)


),
CTE_TOTAL_VOLUME AS (
			SELECT 
				MONTH(D_TARGET) NUM_TARGET_MONTH,
				YEAR(D_TARGET) NUM_TARGET_YEAR,
				CAST(SUM(VL_ITEM_QUANTITY*ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT]))) as decimal(19,8)) VL_TOTAL_VOLUME
			FROM [L1].[L1_FACT_F_BUSINESS_PLAN] fact 
			LEFT JOIN [L1].[L1_DIM_A_ITEM] item 
				ON item.[ID_ITEM]=fact.ID_ITEM
			LEFT JOIN [L1].[L1_DIM_A_ITEM_BUSINESS_PLAN] itemBS
				ON itemBS.[ID_ITEM_BUSINESS_PLAN]=fact.[ID_ITEM_BUSINESS_PLAN]
			LEFT JOIN [L0].L0_MI_BUSINESS_PLAN_ITEM_DEFAULT itemdefault
				ON itemdefault.Itemno=itemBS.NUM_ITEM
			GROUP BY MONTH(D_TARGET),
				YEAR(D_TARGET)

),

CTE_SALES_L1 AS (
			SELECT 
			 fact.D_SNAPSHOT
			 ,fact.CD_SOURCE
			,fact.ID_COMPANY												
			,fact.D_TARGET 													
			,fact.ID_ITEM													
			,fact.ID_ITEM_BUSINESS_PLAN										
			,fact.CD_FULFILLMENT											
			,fact.T_REVISED_LOCATION										
			,fact.[CD_COUNTRY_GROUP]										
			,fact.[CD_CHANNEL_GROUP_3]
			,VL_ITEM_QUANTITY_ORI =fact.VL_ITEM_QUANTITY											
			,AMT_PLAN_PRICE_EUR_ORI = AMT_PLAN_PRICE_EUR	
			,VL_ITEM_QUANTITY = fact.VL_ITEM_QUANTITY + (fact.VL_ITEM_QUANTITY * @QTY_RATIO ) 											
			,AMT_PLAN_PRICE_EUR = fact.AMT_PLAN_PRICE_EUR	+ 	(fact.AMT_PLAN_PRICE_EUR * @PLAN_PRICE_RATIO ) 	
			,AMT_SHIPPING_COST_EST_EUR	
			,AMT_MEK_HEDGING_EUR = CASE WHEN fact.AMT_MEK_HEDGING_EUR = 0 THEN ISNULL(itemdefault.[MEK_HEDGING],0) ELSE	fact.AMT_MEK_HEDGING_EUR END			--AS MEKHedging
			,AMT_GTS_MARKUP_EUR														--AS GTSMarkup
			,[AMT_TARGET_NET_ORDER_VALUE_EUR_ORI] = [AMT_TARGET_NET_ORDER_VALUE_EUR]
			,[AMT_TARGET_NET_ORDER_VALUE_EUR] = (fact.VL_ITEM_QUANTITY + (fact.VL_ITEM_QUANTITY * @QTY_RATIO ) ) * (fact.AMT_PLAN_PRICE_EUR	+ 	(fact.AMT_PLAN_PRICE_EUR * @PLAN_PRICE_RATIO ))
			,fact.CD_CURRENCY													--AS Currency
			,item.NUM_ITEM
			--KPI's

			,VL_REFUND_RATE = ISNULL(ref.VL_RATE,0)					
			,VL_CANCEL_RATE = ISNULL(cll.VL_RATE,0)						
			,VL_RETURN_RATE = ISNULL(ret.VL_RATE,0)												
			-- PC1 kpis
			,AMT_PACKAGING_PRECALC_EUR = 
				LEAST(ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * isnull(packcost.AMT_PACKAGING_COST_M3_EUR, 0) / (CASE WHEN ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END), (2 * packcost_max.AMT_PACKAGING_COST_M3_EUR))
																																									
			,AMT_HANDLING_INBOUND_EST_PRECALC_EUR = GREATEST(
	            LEAST((ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * ISNULL(inbound.AMT_HANDLING_INBOUND_COST_EUR,0)) /(CASE WHEN  ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END) ,inbound_max.val_max)
	            ,inbound_min.val_min)
			 ,AMT_HANDLING_TRANS_SHIPPMENT_EST_PRECALC_EUR = GREATEST(
	            LEAST((ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * ISNULL(transship.AMT_HANDLING_TRANS_SHIPMENTS_M3_EUR,0)) /(CASE WHEN  ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END) ,transship_max.val_max)
	            ,transship_min.val_min)						  
			,AMT_HANDLING_ORDERS_EST_PRECALC_EUR = GREATEST(
				LEAST(ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * isnull(ship.AMT_HANDLING_SHIPMENTS_COST_M3_EUR, 0) / (CASE WHEN  ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END), (2 * ship_max.AMT_HANDLING_SHIPMENTS_COST_M3_EUR))
				,(0.02 * ship_min.AMT_HANDLING_SHIPMENTS_COST_M3_EUR)
				)													
			,AMT_CSMANAGEMENT_PRECALC_EUR = ISNULL(csmanage.AMT_CS_MANAGEMENT_ITEM_EUR,0)
			,AMT_CS_HANDLING_CLAIMS_ITEM_EUR = ISNULL(claims.AMT_CS_HANDLING_CLAIMS_ITEM_EUR,0)
			,AMT_TRUCKING_TRANS_SHIPMENT_EST_PRECALC_EUR = ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * isnull(truckingtransship.AMT_TRUCKING_TRANS_SHIPMENTS_M3_EUR, 0) / (CASE WHEN  ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END) 
			,[PCT_COMMISSIONS_MARKETPLACES] = ISNULL(com_mkt_bs.VL_MARKETPLACE_RATE,0)--ISNULL(CM.PCT_COMMISSIONS_ORDER,0)					
			,[PCT_COMMISSIONS_MARKETPLACES_RETURN] = ISNULL(com_mkt_bs.VL_MARKETPLACE_RATE,0)
			,[PCT_PAYMENTS_ORDER] = ISNULL(PAY.PCT_PAYMENTS_ORDER, 0)	
			,AMT_HANDLING_RETURNS_COST_EUR = ISNULL(returns.[AMT_HANDLING_RETURNS_COST_EUR],0)
			,AMT_WAREHOUSING_RENT_EST_PRECALC_EUR = LEAST(ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * isnull(rent.[AMT_RENTAL_COST_M3_EUR], 0) / (CASE WHEN ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END)
			, (2 * rent_max.[AMT_RENTAL_COST_M3_EUR])) 
																
			,AMT_WAREHOUSING_OPEX_EST_PRECALC_EUR = LEAST(ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * isnull(opex.[AMT_OPEX_COST_M3_EUR], 0) / (CASE WHEN ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END)
			, (2 * opex_max.[AMT_OPEX_COST_M3_EUR]))  
														
			,VL_REPLACEMENTPRODUCTCOSTEST_PRECAL_EUR = ISNULL(replacement.VL_RATE,0)					
			,VL_REPLACEMENTORDERQUANTITYEST_PRECAL_EUR = ISNULL(replacement.VL_QUANTITY_RATE,0)
	        ,VL_COMMISSIONS_ORDER_RATE = c_amaz.[VL_COMMISSIONS_ORDER_RATE]			
			,AMT_WAREHOUSING_FBA_EUR =  CASE 
				WHEN fact.CD_CHANNEL_GROUP_3='Amazon' AND fact.CD_FULFILLMENT='FBA' THEN
					((ISNULL(item.VL_VOLUME,(itemdefault.[LENGHT]*itemdefault.[WIDHT]*itemdefault.[HEIGHT])) * ISNULL(WHFBA.AMT_FBA_WAREHOUSE_COST_M3,0)) 
						/(CASE WHEN ISNULL(item.cd_unit_volume,'CCM')='CCM' THEN 1000000 WHEN item.cd_unit_volume='M3' THEN 1 END)) 
						* WHFBA.VL_FBA_STOCK_TURNOVER_M * (1 + WHFBA.VL_RATE) * (1 + WHFBA.VL_LONG_TERM_SURCHARGE_RATE)
				ELSE NULL END									
			,VL_MARKETING_FIXED_COST_RATE = cfm.VL_MARKETING_FIXED_COST_RATE					
			,LOAD_TIMESTAMP = 	fact.DT_DWH_UPDATED						

			,AMT_PACKAGING_COST_ES_EST_PRECALC = (CASE when item.CD_UNIT_WEIGHT='G' then item.VL_GROSS_WEIGHT else item.VL_GROSS_WEIGHT/1000 end )
							* CASE WHEN  item.NUM_ITEM like '[1345]%' AND dimcomp.CD_COMPANY in ('1000','1') THEN 1 ELSE NULL END
							*eps.AMT_PACKAGING_COST_TOTAL/1000000  

		    ,AMT_PACKAGING_COST_DE_EST_PRECALC = (CASE when item.CD_UNIT_WEIGHT='G' then item.VL_GROSS_WEIGHT else item.VL_GROSS_WEIGHT/1000 end )
			 *CASE WHEN  item.NUM_ITEM like '[1345]%' AND dimcomp.CD_COMPANY in ('1000','1') THEN 1 ELSE NULL END
			 *epd.AMT_PACKAGING_COST_TOTAL/1000000

		    ,AMT_PACKAGING_COST_FRA_EST_PRECALC = (CASE WHEN item.CD_UNIT_WEIGHT='G' THEN item.VL_GROSS_WEIGHT ELSE item.VL_GROSS_WEIGHT/1000 END)*france.AMT_COST_PER_MATERIAL/1000000 
			,AMT_ABJ_EST_EUR_PRECALC = (CASE WHEN item.NUM_ITEM like '[13457]%' AND dimcomp.CD_COMPANY in ('1000','1') and fact.[CD_COUNTRY_GROUP]='FR' THEN 1 ELSE NULL END) *(item.VL_GROSS_WEIGHT/1000)*0.7*(rest_abj.AMT_FEE_PER_WEIGHT)	
			,AMT_TEXTILE_EST_EUR_PRECALC = (CASE WHEN item.NUM_ITEM like '[13457]%' AND dimcomp.CD_COMPANY in ('1000','1') and fact.[CD_COUNTRY_GROUP]='FR' THEN 1 ELSE NULL END) *rest_textile.AMT_FEE_PER_UNIT									
			,AMT_TARIF_HT_FURNITURE_PRECALC = (CASE WHEN item.NUM_ITEM like '[13457]%' AND dimcomp.CD_COMPANY in ('1000','1') and fact.[CD_COUNTRY_GROUP]='FR' THEN 1 ELSE NULL END) * furniture.AMT_TARIF_HT 			
			,AMT_FEE_PER_UNIT_BATTERIES_PRECALC = (CASE WHEN  item.NUM_ITEM like '[1345]%' AND dimcomp.CD_COMPANY in ('1000','1') THEN 1 ELSE NULL END) * batteries.AMT_FEE_PER_UNIT_COUNT  
			,AMT_FEE_PER_WEIGHT_BATTERIES_PRECALC = (CASE WHEN item.NUM_ITEM like '[1345]%' AND dimcomp.CD_COMPANY in ('1000','1') THEN 1 ELSE NULL END) * batteries. AMT_FEE_PER_WEIGHT_COUNT  
			,AMT_ASL_EST_EUR_PRECALC = (CASE WHEN  item.NUM_ITEM like '[13457]%' AND dimcomp.CD_COMPANY in ('1000','1') and fact.[CD_COUNTRY_GROUP]='FR' THEN 1 ELSE NULL END) *rest_asl.AMT_FEE_PER_UNIT 
            ,el.[GEMA PL]
            ,el.AIRTAG
            ,el.AMT_PRODUCT_LICENSES_EST_PRECAL_USD * us.VL_FX_RATE + el.AMT_PRODUCT_LICENSES_EST_PRECAL_EUR as AMT_PRODUCT_LICENSES_EST_PRECAL
			,AMT_WEE_PRECALC = CASE WHEN  item.NUM_ITEM like '[1345]%' AND dimcomp.CD_COMPANY in ('1000','1') THEN 1 ELSE NULL END
			*(CASE WHEN fact.[CD_COUNTRY_GROUP]<>'DE' and item.T_PRODUCT_HIERARCHY_3 in ('Cross Trainer', 'Rowing Machine', 'Sixpack Training', 'Cardio Bikes') THEN 1 ELSE item.VL_GROSS_WEIGHT*0.7/1000 END)*rest_wee.AMT_FEE_PER_WEIGHT * rate_wee.VL_FX_RATE  
			,france.VL_CSU_FEE
			,item.VL_GROSS_WEIGHT
			,rest_wee.VL_MIN_INTERVAL								
			,rest_wee.VL_MAX_INTERVAL								
			,AMT_FEE_PER_UNIT_2 = er1.AMT_FEE_PER_UNIT				
		    ,AMT_FEE_PER_UNIT_WEE = rest_wee.AMT_FEE_PER_UNIT							
			,fr.VL_FX_RATE
			,USD_RATE = us.VL_FX_RATE									
			,SEK_RATE = frsek.VL_FX_RATE									
			,WEE_FX_RATE = rate_wee.VL_FX_RATE                                   
			,sch.AMT_TAX_CAP_SEK
			,sch.AMT_TAX_KG_SEK
			,wee.VL_WEIGHT
			,AMT_DEPRECIATIONEST_PRECALC_EUR = 0-- CASE WHEN VL_ITEM_QUANTITY <>0 THEN ((ISNULL(AMT_MEK_HEDGING_EUR,0) - ISNULL(AMT_GTS_MARKUP_EUR,0)))*depreciation.VL_RATE ELSE NULL END 
			,[AMT_CORRECTION_FACTOR_ORDER] = ISNULL(factor.[AMT_CORRECTION_FACTOR_ORDER],1) 
            ,[AMT_CORRECTION_FACTOR_RETURN] = ISNULL(factor.[AMT_CORRECTION_FACTOR_RETURN],1)
            ,[AMT_CORRECTION_FACTOR_REPLACEMENT] = ISNULL(factor.[AMT_CORRECTION_FACTOR_REPLACEMENT],1)
			,PCT_MKT_RATE = mkt.MARKETINGRATE
			,PCT_VAT_VALUE = CASE WHEN ISNULL(vat.PCT_VALUE,0) = 0 THEN 0 ELSE vat.PCT_VALUE / 100 END
			FROM [L1].[L1_FACT_F_BUSINESS_PLAN] fact 
			LEFT JOIN [L1].[L1_DIM_A_ITEM] item 
				ON item.[ID_ITEM]=fact.ID_ITEM
			LEFT JOIN [L1].[L1_DIM_A_ITEM_BUSINESS_PLAN] itemBS
				ON itemBS.[ID_ITEM_BUSINESS_PLAN]=fact.[ID_ITEM_BUSINESS_PLAN]
			LEFT JOIN [L0].L0_MI_BUSINESS_PLAN_ITEM_DEFAULT itemdefault
				ON itemdefault.Itemno=itemBS.NUM_ITEM

			LEFT JOIN [L1].[L1_DIM_A_COMPANY] dimcomp
				 on dimcomp.ID_COMPANY=fact.ID_COMPANY
			LEFT JOIN [L1].[L1_DIM_A_SALES_REPLACEMENT_VALUES] replacement
				ON item.T_PRODUCT_HIERARCHY_2 = replacement.T_PRODUCT_HIERARCHY_2
				AND CASE WHEN fact.[CD_CHANNEL_GROUP_3] = 'CEE' THEN 'CEE' ELSE fact.[CD_COUNTRY_GROUP] END = replacement.[CD_COUNTRY_INVOICE_GROUP]
				--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN replacement.D_VALID_FROM AND replacement.D_VALID_TO
				AND fact.D_TARGET BETWEEN replacement.D_VALID_FROM AND replacement.D_VALID_TO

			LEFT JOIN L1.L1_DIM_A_SALES_REFUND_VALUES ref  
				--on DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN ref.D_VALID_FROM AND ref.D_VALID_TO
				on fact.D_TARGET BETWEEN ref.D_VALID_FROM AND ref.D_VALID_TO
				AND CASE WHEN fact.[CD_CHANNEL_GROUP_3] = 'CEE' THEN 'CEE' ELSE fact.[CD_COUNTRY_GROUP] END = ref.[CD_COUNTRY_INVOICE_GROUP]
				and item.T_PRODUCT_HIERARCHY_2 =ref.[T_PRODUCT_HIERARCHY_2]
			LEFT JOIN L1.L1_DIM_A_SALES_RETURN_VALUES ret  
				--on DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN ret.D_VALID_FROM AND ret.D_VALID_TO
				on fact.D_TARGET BETWEEN ret.D_VALID_FROM AND ret.D_VALID_TO
				AND CASE WHEN fact.[CD_CHANNEL_GROUP_3] = 'CEE' THEN 'CEE' ELSE fact.[CD_COUNTRY_GROUP] END = ret.[CD_COUNTRY_INVOICE_GROUP]
				and item.T_PRODUCT_HIERARCHY_2 =ret.T_PRODUCT_HIERARCHY_2
			LEFT JOIN L1.L1_DIM_A_ORDER_CANCELLATION_VALUES cll  
				on DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN cll.D_VALID_FROM AND cll.D_VALID_TO
				AND CASE WHEN fact.[CD_CHANNEL_GROUP_3] = 'CEE' THEN 'CEE' ELSE fact.[CD_COUNTRY_GROUP] END = cll.[CD_COUNTRY_INVOICE_GROUP]
				and item.T_PRODUCT_HIERARCHY_2 =cll.[T_PRODUCT_HIERARCHY_2]
			--LEFT JOIN CTE_DAILY_COSTS costs
			--	on costs.[Month] = MONTH(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))
			--	AND costs.[YEAR] = YEAR(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))
			LEFT JOIN CTE_TOTAL_VOLUME dvol
				on dvol.NUM_TARGET_MONTH = MONTH(D_TARGET)
				  AND dvol.NUM_TARGET_YEAR = YEAR(D_TARGET)

		LEFT JOIN L1.L1_DIM_A_HANDLING_INBOUND inbound
				ON item.CD_SIZE_BRACKET = inbound.CD_SIZE_BRACKET
				AND fact.T_REVISED_LOCATION = inbound.T_STORAGE_LOCATION
				--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN inbound.D_VALID_FROM AND inbound.D_VALID_TO
				AND fact.D_TARGET BETWEEN inbound.D_VALID_FROM AND inbound.D_VALID_TO

		LEFT JOIN [L1].[L1_DIM_A_HANDLING_TRANSSHIP] transship
			ON item.CD_SIZE_BRACKET = transship.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = transship.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = transship.T_STORAGE_LOCATION
			--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN transship.D_VALID_FROM AND transship.D_VALID_TO
			AND fact.D_TARGET BETWEEN transship.D_VALID_FROM AND transship.D_VALID_TO

		LEFT JOIN L1.L1_DIM_A_PACKAGING_COST packcost
			ON item.CD_SIZE_BRACKET = packcost.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = packcost.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = packcost.T_STORAGE_LOCATION
			--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN packcost.D_VALID_FROM AND packcost.D_VALID_TO
			AND fact.D_TARGET BETWEEN packcost.D_VALID_FROM AND packcost.D_VALID_TO


		LEFT JOIN L1.L1_DIM_A_PACKAGING_COST packcost_max
			ON 'Over-Size_Large' = packcost_max.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = packcost_max.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = packcost_max.T_STORAGE_LOCATION
			--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN packcost_max.D_VALID_FROM AND packcost_max.D_VALID_TO
			AND fact.D_TARGET BETWEEN packcost_max.D_VALID_FROM AND packcost_max.D_VALID_TO

	    LEFT JOIN L1.L1_DIM_A_HANDLING_SHIPMENTS ship
			ON item.CD_SIZE_BRACKET = ship.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = ship.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = ship.T_STORAGE_LOCATION
		--	AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN ship.D_VALID_FROM AND ship.D_VALID_TO
			AND fact.D_TARGET BETWEEN ship.D_VALID_FROM AND ship.D_VALID_TO
		LEFT JOIN L1.L1_DIM_A_HANDLING_SHIPMENTS ship_min
			ON 'Standard-Size_Small' = ship_min.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = ship_min.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = ship_min.T_STORAGE_LOCATION
		--	AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN ship_min.D_VALID_FROM AND ship_min.D_VALID_TO
			AND fact.D_TARGET BETWEEN ship_min.D_VALID_FROM AND ship_min.D_VALID_TO

		LEFT JOIN L1.L1_DIM_A_HANDLING_SHIPMENTS ship_max
			ON 'Over-Size_Large' = ship_max.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = ship_max.CD_FULFILLMENT
			AND 	fact.T_REVISED_LOCATION = ship_max.T_STORAGE_LOCATION
		--	AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN ship_max.D_VALID_FROM AND ship_max.D_VALID_TO
			AND fact.D_TARGET BETWEEN ship_max.D_VALID_FROM AND ship_max.D_VALID_TO

		LEFT JOIN [L1].[L1_DIM_A_CS_HANDLING_CLAIMS] claims
			ON fact.cd_fulfillment = claims.cd_fulfillment
			AND CASE WHEN fact.[CD_COUNTRY_GROUP] = 'INT' THEN 'ES' ELSE fact.[CD_COUNTRY_GROUP] END= claims.cd_country
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN claims.D_VALID_FROM AND claims.D_VALID_TO
		LEFT JOIN (SELECT 0.02 * AMT_HANDLING_TRANS_SHIPMENTS_M3_EUR	AS val_min, D_VALID_FROM, D_VALID_TO,CD_FULFILLMENT,T_STORAGE_LOCATION  
	               FROM L1.L1_DIM_A_HANDLING_TRANSSHIP
	               WHERE CD_SIZE_BRACKET = 'Standard-Size_Small')		AS transship_min
			ON fact.CD_FULFILLMENT = transship_min.CD_FULFILLMENT 
			AND 	fact.T_REVISED_LOCATION = transship_min.T_STORAGE_LOCATION
		--	AND  DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN transship_min.D_VALID_FROM AND transship_min.D_VALID_TO 
			AND  fact.D_TARGET_LOOKUP BETWEEN transship_min.D_VALID_FROM AND transship_min.D_VALID_TO 
	    LEFT JOIN (SELECT 2 * AMT_HANDLING_TRANS_SHIPMENTS_M3_EUR		AS val_max, D_VALID_FROM, D_VALID_TO,CD_FULFILLMENT,T_STORAGE_LOCATION  
	               FROM L1.L1_DIM_A_HANDLING_TRANSSHIP
	               WHERE CD_SIZE_BRACKET = 'Over-Size_Large')			AS transship_max
	        ON fact.CD_FULFILLMENT = transship_max.CD_FULFILLMENT 
			AND 	fact.T_REVISED_LOCATION = transship_max.T_STORAGE_LOCATION
			--AND  DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN transship_max.D_VALID_FROM AND transship_max.D_VALID_TO 
			AND  fact.D_TARGET BETWEEN transship_max.D_VALID_FROM AND transship_max.D_VALID_TO 

		LEFT JOIN (SELECT 0.02 * AMT_HANDLING_INBOUND_COST_EUR			AS val_min, D_VALID_FROM, D_VALID_TO,T_STORAGE_LOCATION  
	               FROM L1.L1_DIM_A_HANDLING_INBOUND 
	               WHERE CD_SIZE_BRACKET = 'Standard-Size_Small')		AS inbound_min
	        --ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN inbound_min.D_VALID_FROM AND inbound_min.D_VALID_TO 
			ON fact.D_TARGET BETWEEN inbound_min.D_VALID_FROM AND inbound_min.D_VALID_TO 
			AND 	fact.T_REVISED_LOCATION = inbound_min.T_STORAGE_LOCATION
	    LEFT JOIN (SELECT 2 * AMT_HANDLING_INBOUND_COST_EUR				AS val_max, D_VALID_FROM, D_VALID_TO,T_STORAGE_LOCATION 
	               FROM L1.L1_DIM_A_HANDLING_INBOUND 
	               WHERE CD_SIZE_BRACKET = 'Over-Size_Large')			AS inbound_max
	       -- ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN inbound_max.D_VALID_FROM AND inbound_max.D_VALID_TO 
			ON fact.D_TARGET BETWEEN inbound_max.D_VALID_FROM AND inbound_max.D_VALID_TO 
			AND 	fact.T_REVISED_LOCATION = inbound_max.T_STORAGE_LOCATION
		LEFT JOIN [L1].[L1_DIM_A_CS_MANAGEMENT] csmanage
			ON CASE WHEN fact.[CD_COUNTRY_GROUP] = 'INT' THEN 'ES' ELSE fact.[CD_COUNTRY_GROUP] END = csmanage.CD_COUNTRY
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN csmanage.D_VALID_FROM AND csmanage.D_VALID_TO 
			AND fact.CD_FULFILLMENT = csmanage.CD_FULFILLMENT
		--LEFT JOIN [L1].[L1_DIM_A_SALES_CHANNEL] dimchannel
		--	ON fact.ID_SALES_CHANNEL = dimchannel.ID_SALES_CHANNEL
		LEFT JOIN [L1].[L1_DIM_A_TRUCKING_TRANS_SHIPMENTS] truckingtransship
			ON CASE WHEN fact.[CD_COUNTRY_GROUP] = 'INT' THEN 'ES' ELSE fact.[CD_COUNTRY_GROUP] END = truckingtransship.CD_COUNTRY_DELIVERY
			AND isnull(item.CD_SIZE_BRACKET,'Standard-Size_Medium') = truckingtransship.CD_SIZE_BRACKET
			AND truckingtransship.CD_FULFILLMENT = 'B2B'
			AND fact.T_REVISED_LOCATION = truckingtransship.T_STORAGE_LOCATION
			AND truckingtransship.CD_CHANNEL_GROUP_1 ='B2B'
			AND fact.D_TARGET_LOOKUP BETWEEN truckingtransship.D_VALID_FROM AND truckingtransship.D_VALID_TO

		LEFT JOIN CTE_CS_PAYMENTS		AS PAY
			ON fact.CD_CHANNEL_GROUP_3 = PAY.CD_CHANNEL_GROUP_3
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN PAY.D_VALID_FROM AND PAY.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_HANDLING_RETURNS]						AS returns
			ON fact.CD_FULFILLMENT = returns.CD_FULFILLMENT
			AND item.CD_SIZE_BRACKET = returns.CD_SIZE_BRACKET
			AND 	fact.T_REVISED_LOCATION = returns.T_STORAGE_LOCATION
			--AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN returns.D_VALID_FROM AND returns.D_VALID_TO
			AND fact.D_TARGET BETWEEN returns.D_VALID_FROM AND returns.D_VALID_TO

		LEFT JOIN [L1].[L1_DIM_A_CS_COMMISSIONS_AMAZON] c_amaz
	        ON item.T_PRODUCT_HIERARCHY_1 = c_amaz.T_PRODUCT_HIERARCHY_1
	        AND item.T_PRODUCT_HIERARCHY_2 = c_amaz.T_PRODUCT_HIERARCHY_2
	        AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN c_amaz.D_VALID_FROM AND c_amaz.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_WAREHOUSING_FBA] WHFBA
			ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN WHFBA.D_VALID_FROM AND WHFBA.D_VALID_TO
			AND item.CD_SIZE_BRACKET_FBA = WHFBA.CD_SIZE_BRACKET_FBA
		LEFT JOIN [L1].[L1_DIM_A_MARKETING_FIXED_COST] cfm
	        on fact.D_TARGET_LOOKUP between cfm.D_VALID_FROM and cfm.D_VALID_TO
	        and REPLACE(fact.[CD_CHANNEL_GROUP_3],' ','') = CASE WHEN cfm.CD_CHANNEL_GROUP_1 like '%Shop CEE%' THEN 'CEE' ELSE REPLACE(cfm.CD_CHANNEL_GROUP_1,' ','') END
		LEFT JOIN 
	      (SELECT SUM(AMT_PACKAGING_PRICE_EUR*VL_PACKAGING_PROPORTION_RATE) AS AMT_PACKAGING_COST_TOTAL
		          ,d_valid_from
				  ,d_valid_to
				  ,cd_enviro_category
				  ,cd_cost_type
           FROM [L1].[L1_DIM_A_PL_ENVIRO_PACKAGING]
           WHERE CD_COST_TYPE = 'POM' and CD_ENVIRO_CATEGORY='PAC_ES' 
           GROUP BY d_valid_from,d_valid_to,cd_enviro_category,cd_cost_type
		   ) eps
		   ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between eps.d_valid_from and eps.d_valid_to
		   AND fact.CD_COUNTRY_GROUP='ES' 
         LEFT JOIN 
	       (SELECT SUM(AMT_PACKAGING_PRICE_EUR*VL_PACKAGING_PROPORTION_RATE) AS AMT_PACKAGING_COST_TOTAL
		    ,d_valid_from
			,d_valid_to
			,cd_enviro_category
			,cd_cost_type
            FROM [L1].[L1_DIM_A_PL_ENVIRO_PACKAGING]
            WHERE CD_COST_TYPE = 'POM' and CD_ENVIRO_CATEGORY='PAC_GER' 
            GROUP BY d_valid_from,d_valid_to,cd_enviro_category,cd_cost_type
			) epd			
			ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between epd.d_valid_from and epd.d_valid_to
			AND fact.CD_COUNTRY_GROUP='DE' 
		 LEFT JOIN CTE_LICENSES el
			ON fact.ID_ITEM=el.ID_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN el.D_VALID_FROM AND el.D_VALID_TO
		 LEFT JOIN PACKAGING_FRA france
			ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between france.d_valid_from and france.d_valid_to
			AND fact.CD_COUNTRY_GROUP='FR' 
			AND item.NUM_ITEM like '[1345]%' 
			AND (dimcomp.CD_COMPANY=1000 or dimcomp.CD_COMPANY=1)
		  --join classification for textile
		 LEFT join [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] class_textile
			ON  class_textile.cd_item=item.NUM_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between  class_textile.D_VALID_FROM AND  class_textile.D_VALID_TO 
			AND  class_textile.cd_enviro_category = 'TEXTILE'
		 --join rest for textile
		 LEFT JOIN [L1].[L1_DIM_A_PL_ENVIRO_REST] rest_textile
			ON class_textile.cd_enviro_category=rest_textile.cd_enviro_category
			AND class_textile.cd_classification_category=rest_textile.cd_classification_category
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between rest_textile.D_VALID_FROM AND rest_textile.D_VALID_TO 
		   --join classification for abj
		 LEFT join [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] class_abj
			ON  class_abj.cd_item=item.NUM_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between  class_abj.D_VALID_FROM AND  class_abj.D_VALID_TO
		    AND class_abj.cd_enviro_category = 'ABJ'
		 --join rest for abj
		 LEFT JOIN 	[L1].[L1_DIM_A_PL_ENVIRO_REST] rest_abj
			ON class_abj.cd_enviro_category= rest_abj.cd_enviro_category
			AND class_abj.cd_classification_category= rest_abj.cd_classification_category
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between  rest_abj.D_VALID_FROM AND  rest_abj.D_VALID_TO 
		    --join classification for ASL
		 LEFT join [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] class_asl
			ON   class_asl.cd_item=item.NUM_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between   class_asl.D_VALID_FROM AND   class_asl.D_VALID_TO 
			AND  class_asl.cd_enviro_category = 'ASL'
		 --join rest for ASL
		 LEFT JOIN [L1].[L1_DIM_A_PL_ENVIRO_REST] rest_asl
			ON class_asl.cd_enviro_category=rest_asl.cd_enviro_category
			AND class_asl.cd_classification_category=rest_asl.cd_classification_category
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between rest_asl.D_VALID_FROM AND rest_asl.D_VALID_TO 	
			AND (item.VL_GROSS_WEIGHT*0.7/1000)>rest_asl.VL_MIN_INTERVAL and (item.VL_GROSS_WEIGHT*0.7/1000)<=rest_asl.VL_MAX_INTERVAL
		 --join rest for umverpackung
		 LEFT JOIN 	[L1].[L1_DIM_A_PL_ENVIRO_REST] er1			  
			ON DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between er1.D_VALID_FROM AND er1.D_VALID_TO 
			AND er1.cd_enviro_category='UMVERPACKUNG'
			and fact.CD_COUNTRY_GROUP in ('DE','FR','ES')
			AND (item.NUM_ITEM like '[1345]%'  AND (dimcomp.CD_COMPANY=1000 or dimcomp.CD_COMPANY=1)) 
		--join classification for wee 
		 LEFT JOIN [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] wee 
			on wee.cd_item=item.NUM_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between wee.D_VALID_FROM AND wee.D_VALID_TO 
			AND wee.cd_enviro_category  = 'WEE'
			AND fact.CD_COUNTRY_GROUP=wee.cd_Country_delivery
		-- join rest for wee
		 LEFT JOIN 
			(select cd_enviro_category,cd_classification_category,D_VALID_FROM,D_VALID_TO,cd_Country_delivery,VL_MIN_INTERVAL,VL_MAX_INTERVAL,cd_currency,sum([AMT_FEE_PER_UNIT]) as AMT_FEE_PER_UNIT ,sum([AMT_FEE_PER_WEIGHT]) as AMT_FEE_PER_WEIGHT
			FROM [L1].[L1_DIM_A_PL_ENVIRO_REST]
			group by cd_enviro_category,cd_classification_category,D_VALID_FROM,D_VALID_TO,cd_Country_delivery,cd_currency,VL_MIN_INTERVAL,VL_MAX_INTERVAL
			) rest_wee
			ON wee.cd_enviro_category=rest_wee.cd_enviro_category
			AND (wee.cd_classification_category=rest_wee.cd_classification_category)
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between rest_wee.D_VALID_FROM AND rest_wee.D_VALID_TO 
			AND wee.cd_Country_delivery=rest_wee.cd_Country_delivery
		    AND (CASE WHEN fact.CD_COUNTRY_GROUP<>'DE' and item.T_PRODUCT_HIERARCHY_3 in ('Cross Trainer', 'Rowing Machine', 'Sixpack Training', 'Cardio Bikes') THEN 1 ELSE item.VL_GROSS_WEIGHT*0.7/1000 END)>rest_wee.VL_MIN_INTERVAL 
			AND (CASE WHEN fact.CD_COUNTRY_GROUP<>'DE' and item.T_PRODUCT_HIERARCHY_3 in ('Cross Trainer', 'Rowing Machine', 'Sixpack Training', 'Cardio Bikes') THEN 1 ELSE item.VL_GROSS_WEIGHT*0.7/1000 END)<=rest_wee.VL_MAX_INTERVAL
			--join fx rate
		 LEFT JOIN [L1].[L1_FACT_F_FX_RATE] fr
			ON 'eur'=fr.cd_currency
			AND Year(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Year(fr.D_EFFECTIVE)
			AND Month(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Month(fr.D_EFFECTIVE)
		 LEFT JOIN [L1].[L1_FACT_F_FX_RATE] frsek
			ON  frsek.cd_currency='SEK'
			AND Year(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Year(frsek.D_EFFECTIVE)
			AND Month(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Month(frsek.D_EFFECTIVE)
		--join fx rate for us
		LEFT JOIN [L1].[L1_FACT_F_FX_RATE] us
			ON us.cd_currency='USD'
			AND Year(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Year(us.D_EFFECTIVE)
			AND Month(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Month(us.D_EFFECTIVE)
		--join fx rate for wee currency
		LEFT JOIN [L1].[L1_FACT_F_FX_RATE] rate_wee
		    ON rest_wee.cd_currency=rate_wee.cd_currency
		    AND Year(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Year(rate_wee.D_EFFECTIVE)
		    AND Month(DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP))=Month(rate_wee.D_EFFECTIVE)
		LEFT JOIN [L1].[L1_DIM_A_PL_SWEDISH_CHEMICAL_TAX] sch
			ON substring(item.CD_COMMODITY_CODE,1,6)=sch.CD_TARRIC_NUMBER
			and DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN sch.D_VALID_FROM AND sch.D_VALID_TO
			AND (item.NUM_ITEM like '[1345]%' and (dimcomp.CD_COMPANY=1000 or dimcomp.CD_COMPANY=1)) 
			AND fact.CD_COUNTRY_GROUP='SE' 
		--join batteries
		LEFT JOIN (
			SELECT item.[ID_ITEM],batteries.d_valid_from,batteries.d_valid_to,batteries.cd_enviro_category,rest_batt.cd_country_delivery,sum(AMT_FEE_PER_UNIT*VL_COUNT) as AMT_FEE_PER_UNIT_COUNT
			,sum(VL_WEIGHT*AMT_FEE_PER_WEIGHT*VL_COUNT/1000) AS AMT_FEE_PER_WEIGHT_COUNT
			 FROM [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] batteries
			 LEFT JOIN [L1].[L1_DIM_A_ITEM] item 
			 ON CAST (item.cd_item as bigint)=batteries.CD_ITEM
			 LEFT JOIN [L1].[L1_DIM_A_PL_ENVIRO_REST] rest_batt
			 ON batteries.cd_enviro_category=rest_batt.cd_enviro_category
			 AND batteries.cd_classification_category=rest_batt.cd_classification_category
			 AND batteries.d_valid_to = rest_batt.d_valid_to
			 AND batteries.VL_WEIGHT>rest_batt.VL_MIN_INTERVAL and batteries.VL_WEIGHT<=rest_batt.VL_MAX_INTERVAL
			 WHERE batteries.cd_enviro_category = 'BATTERIES'
			 GROUP BY item.[ID_ITEM],batteries.d_valid_from,batteries.d_valid_to,batteries.cd_enviro_category,rest_batt.cd_country_delivery
			 ) batteries
			ON batteries.id_item=fact.id_item
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between batteries.D_VALID_FROM AND batteries.D_VALID_TO 
			AND fact.CD_COUNTRY_GROUP=batteries.cd_Country_delivery 
		 -- join furniture
	    LEFT join 
			(SELECT item.[ID_ITEM],ec.d_valid_from,ec.d_valid_to,ec.cd_enviro_category,sum(AMT_TARIF_HT*VL_COUNT) as AMT_TARIF_HT 
			 FROM [L1].[L1_DIM_A_ENVIRO_CLASSIFICATION] ec 
			 LEFT JOIN [L1].[L1_DIM_A_ITEM] item 
			 ON CAST (item.cd_item as bigint)=ec.CD_ITEM
			 LEFT JOIN [L1].[L1_DIM_A_PL_ENVIRO_REST] rest_furniture
			 ON ec.cd_enviro_category=rest_furniture.cd_enviro_category
			 AND ec.cd_classification_category=rest_furniture.cd_classification_category
			 AND ec.d_valid_to = rest_furniture.d_valid_to
			 AND (item.VL_GROSS_WEIGHT*0.7/1000/VL_COUNT)>rest_furniture.VL_MIN_INTERVAL and (item.VL_GROSS_WEIGHT*0.7/1000/VL_COUNT)<=rest_furniture.VL_MAX_INTERVAL
			 WHERE ec.cd_enviro_category = 'FURNITURE' 
			 GROUP BY item.[ID_ITEM],ec.d_valid_from,ec.d_valid_to,ec.cd_enviro_category
			 ) furniture
			ON furniture.id_item=fact.ID_ITEM
			AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) between furniture.D_VALID_FROM AND furniture.D_VALID_TO  

			--join fulfillment shipping factor
		LEFT JOIN L1.L1_DIM_A_FULFILLMENT_SHIPPING_FACTOR factor
		ON item.CD_SIZE_BRACKET = factor.CD_SIZE_BRACKET
		AND fact.CD_FULFILLMENT = factor.CD_FULFILLMENT
		AND fact.T_REVISED_LOCATION = factor.T_STORAGE_LOCATION
		AND CASE WHEN fact.CD_COUNTRY_GROUP = 'INT'THEN 'ES' WHEN fact.[CD_CHANNEL_GROUP_3]='CEE' THEN 'CEE' ELSE fact.CD_COUNTRY_GROUP END = factor.[CD_COUNTRY_DELIVERY_GROUP]
		AND DATEADD(YEAR,-1,fact.D_TARGET_LOOKUP) BETWEEN factor.D_VALID_FROM AND factor.D_VALID_TO 
		LEFT JOIN [L0].[L0_MI_BUSINESS_PLAN_MARKETING_RATES] mkt
			on REPLACE(mkt.[CHANNELGROUP3],' ','') = fact.[CD_CHANNEL_GROUP_3]
			and fact.D_TARGET = mkt.[MONTH]

		LEFT JOIN [L1].[L1_FACT_A_COUNTRY_VAT] vat
				on vat.[CD_COUNTRY] = CASE WHEN fact.CD_COUNTRY_GROUP = 'INT'THEN 'SI' ELSE fact.CD_COUNTRY_GROUP END 
				and vat.[D_VALID_TO]  = '9999-12-31'
		LEFT JOIN [L1].[L1_DIM_A_WAREHOUSE_RENT] rent
			ON item.CD_SIZE_BRACKET = rent.CD_SIZE_BRACKET
			AND fact.T_REVISED_LOCATION = rent.T_STORAGE_LOCATION
			AND fact.CD_FULFILLMENT = rent.CD_FULFILLMENT
			AND fact.D_TARGET BETWEEN rent.D_VALID_FROM AND rent.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_WAREHOUSE_RENT] rent_max
			ON 'Over-Size_Large' = rent_max.CD_SIZE_BRACKET
			AND fact.T_REVISED_LOCATION = rent_max.T_STORAGE_LOCATION
			AND fact.CD_FULFILLMENT = rent_max.CD_FULFILLMENT
			AND fact.D_TARGET BETWEEN rent_max.D_VALID_FROM AND rent_max.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_WAREHOUSING_OPEX] opex
			ON item.CD_SIZE_BRACKET = opex.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = opex.CD_FULFILLMENT
			AND fact.T_REVISED_LOCATION = opex.T_STORAGE_LOCATION
			AND fact.D_TARGET BETWEEN opex.D_VALID_FROM AND opex.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_WAREHOUSING_OPEX] opex_max
			ON 'Over-Size_Large' = opex_max.CD_SIZE_BRACKET
			AND fact.CD_FULFILLMENT = opex_max.CD_FULFILLMENT
			AND fact.T_REVISED_LOCATION = opex_max.T_STORAGE_LOCATION
			AND fact.D_TARGET BETWEEN opex_max.D_VALID_FROM AND opex_max.D_VALID_TO
		LEFT JOIN [L1].[L1_DIM_A_CS_COMMISSIONS_MARKETPLACES_BUSINESS_PLAN] com_mkt_bs
			on	com_mkt_bs.D_MONTH = fact.D_TARGET
			AND com_mkt_bs.CD_CHANNEL_GROUP_3 = fact.CD_CHANNEL_GROUP_3
	--	(D_MONTH,CD_CHANNEL_GROUP_3,com_mkt_bs.VL_MARKETPLACE_RATE)
		WHERE 
			 CD_SOURCE = 'BUD' --@source OR @source = 'ALL'
			 AND itemBS.NUM_ITEM = @ITEMNO
			 AND fact.CD_CHANNEL_GROUP_3 = @CHANNEL
			 AND fact.CD_COUNTRY_GROUP = @COUNTRY
			 AND fact.D_TARGET = @TARGET_DATE

)		
,
	CTE_SALES_L2 AS 
	(
		SELECT sales.*
			,AMT_PAYMENTS_EUR = ([AMT_TARGET_NET_ORDER_VALUE_EUR] * [PCT_PAYMENTS_ORDER])	
			,AMT_COMMISSIONS_MARKETPLACES_EUR  = CASE WHEN CD_CHANNEL_GROUP_3 = 'CEE' then 0 ELSE ([AMT_TARGET_NET_ORDER_VALUE_EUR]*(1+PCT_VAT_VALUE) * [PCT_COMMISSIONS_MARKETPLACES]) END
			,AMT_GROSS_ORDER_VALUE_EUR = [AMT_TARGET_NET_ORDER_VALUE_EUR]
			,VL_CANCELLED_ORDERS_QUANTITY_EST = ([VL_ITEM_QUANTITY] * VL_CANCEL_RATE)	
			,AMT_COGS_OPERATIONS_EST = [AMT_TARGET_NET_ORDER_VALUE_EUR] * 0.033

		    ,AMT_HANDLINGRETURNSORDERS_CALC_EUR = (AMT_HANDLING_RETURNS_COST_EUR * VL_RETURN_RATE)		
			,AMT_HANDLINGREMOVALSFBA_CALC_EUR = (AMT_HANDLING_RETURNS_COST_EUR * VL_RETURN_RATE * 0.01)											
	        ,AMT_COMMISSIONS_AMAZON_EUR = CASE WHEN CD_CHANNEL_GROUP_3 = 'Amazon' then [AMT_TARGET_NET_ORDER_VALUE_EUR]*(1+PCT_VAT_VALUE)*VL_COMMISSIONS_ORDER_RATE ELSE NULL END


		FROM CTE_SALES_L1 sales
	)
,
	CTE_SALES_L3 AS 
	(
		SELECT sales.*
				,AMT_CANCELLED_ORDER_VALUE_EST_EUR = 0--(AMT_GROSS_ORDER_VALUE_EUR * VL_CANCEL_RATE)
				,VL_NET_ORDER_QUANTITY = [VL_ITEM_QUANTITY]--([VL_ITEM_QUANTITY] - VL_CANCELLED_ORDERS_QUANTITY_EST) 
				,AMT_REFUNDED_ORDER_VALUE_EST_EUR = (AMT_GROSS_ORDER_VALUE_EUR * VL_REFUND_RATE) 							
				,AMT_MARKETING_MARKETPLACES_EST_EUR = 0--(PCT_MARKETING * AMT_GROSS_ORDER_VALUE_EUR)	
				,AMT_HANDLING_RETURNS_EST_EUR = (AMT_HANDLINGRETURNSORDERS_CALC_EUR + AMT_HANDLINGREMOVALSFBA_CALC_EUR)									
				,AMT_COMMISSIONS_AMAZON_REFUNDS_EUR = CASE WHEN AMT_COMMISSIONS_AMAZON_EUR between c_amaz_ref.[VL_VALUE_FROM] and c_amaz_ref.[VL_VALUE_TO] 
				      THEN CASE WHEN c_amaz_ref.[VL_COMMISSIONS_REFUND_ABOVE_THRESHOLD] <> 0 
				                THEN (AMT_COMMISSIONS_AMAZON_EUR - c_amaz_ref.[VL_COMMISSIONS_REFUND_ABOVE_THRESHOLD])*sales.VL_REFUND_RATE 
				                ELSE (AMT_COMMISSIONS_AMAZON_EUR * c_amaz_ref.[VL_COMMISSIONS_REFUND_BELOW_THRESHOLD_RATE])*sales.VL_REFUND_RATE 
				           END
				      ELSE NULL
				END
	    FROM CTE_SALES_L2 sales
	    LEFT JOIN [L1].[L1_DIM_A_CS_COMMISSIONS_AMAZON_REFUND] c_amaz_ref
	         ON DATEADD(YEAR,-1,D_TARGET) BETWEEN c_amaz_ref.[D_VALID_FROM] AND c_amaz_ref.[D_VALID_TO]
	         AND AMT_COMMISSIONS_AMAZON_EUR > c_amaz_ref.VL_VALUE_FROM 
	         AND AMT_COMMISSIONS_AMAZON_EUR <= c_amaz_ref.VL_VALUE_TO 
	)
	,
	CTE_SALES_L4 AS 
	(
		SELECT sales.*
				 ,AMT_CS_HANDLING_CLAIMS_EUR = (VL_NET_ORDER_QUANTITY * AMT_CS_HANDLING_CLAIMS_ITEM_EUR)										
				 ,AMT_COMMISSIONS_MARKETPLACES_REFUNDS_EUR = CASE WHEN CD_CHANNEL_GROUP_3 = 'CEE' then 0 ELSE  (AMT_REFUNDED_ORDER_VALUE_EST_EUR*(1+PCT_VAT_VALUE) * [PCT_COMMISSIONS_MARKETPLACES_RETURN]) END		
				 ,AMT_NET_ORDER_VALUE_EST_EUR = AMT_GROSS_ORDER_VALUE_EUR--(ISNULL(AMT_GROSS_ORDER_VALUE_EUR,0) - ISNULL(AMT_CANCELLED_ORDER_VALUE_EST_EUR,0))			
				 ,VL_REFUNDED_QUANTITY_EST = (VL_NET_ORDER_QUANTITY * VL_REFUND_RATE) 			
				 ,AMT_PACKAGING_EUR = (VL_NET_ORDER_QUANTITY * AMT_PACKAGING_PRECALC_EUR)													
				 ,AMT_HANDLING_ORDERS_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_HANDLING_ORDERS_EST_PRECALC_EUR)									
				 ,AMT_HANDLING_INBOUND_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_HANDLING_INBOUND_EST_PRECALC_EUR)								
				 ,AMT_HANDLING_TRANS_SHIPPMENT_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_HANDLING_TRANS_SHIPPMENT_EST_PRECALC_EUR)					
				 ,AMT_TRUCKING_TRANS_SHIPMENT_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_TRUCKING_TRANS_SHIPMENT_EST_PRECALC_EUR)					
				 ,AMT_WAREHOUSING_RENT_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_WAREHOUSING_RENT_EST_PRECALC_EUR)								
				 ,AMT_WAREHOUSING_OPEX_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_WAREHOUSING_OPEX_EST_PRECALC_EUR)				
				 ,VL_RETURNED_QUANTITY_EST = (VL_NET_ORDER_QUANTITY * VL_RETURN_RATE)				
				 ,AMT_CS_MANAGEMENT_EST_EUR = (VL_NET_ORDER_QUANTITY * AMT_CSMANAGEMENT_PRECALC_EUR)											
				 ,VL_REPLACEMENT_ORDER_QUANTITY_EST = (VL_REPLACEMENTORDERQUANTITYEST_PRECAL_EUR * VL_NET_ORDER_QUANTITY)				
		FROM CTE_SALES_L3 sales
	)
	,
	CTE_SALES_L5 AS 
	(
		SELECT sales.*
		        ,AMT_MARKETING_FIXED_COST_EST_EUR = (AMT_NET_ORDER_VALUE_EST_EUR * VL_MARKETING_FIXED_COST_RATE)	
				,AMT_REVENUE_EST_EUR = (AMT_NET_ORDER_VALUE_EST_EUR - AMT_REFUNDED_ORDER_VALUE_EST_EUR)
				,AMT_NET_PRODUCT_COST_EST_EUR = CASE WHEN [VL_ITEM_QUANTITY] <> 0 
											THEN (((VL_NET_ORDER_QUANTITY - VL_REFUNDED_QUANTITY_EST) * (ISNULL([AMT_MEK_HEDGING_EUR],0)-ISNULL([AMT_GTS_MARKUP_EUR],0)) ))   
											ELSE 0 END																		
				,AMT_RETURN_ORDER_VALUE_EST_EUR = (AMT_NET_ORDER_VALUE_EST_EUR * VL_RETURN_RATE) 						
				,AMT_SHIPPING_COSTS_INVOICED_EST_EUR = (VL_NET_ORDER_QUANTITY * [AMT_SHIPPING_COST_EST_EUR] * AMT_CORRECTION_FACTOR_ORDER)				
				,AMT_SHIPPING_COSTS_RETURNED_EST_EUR = (VL_RETURNED_QUANTITY_EST * [AMT_SHIPPING_COST_EST_EUR] * AMT_CORRECTION_FACTOR_RETURN )	    		
				,AMT_SHIPPING_COSTS_REPLACED_EST_EUR = (VL_REPLACEMENT_ORDER_QUANTITY_EST * [AMT_SHIPPING_COST_EST_EUR] * AMT_CORRECTION_FACTOR_REPLACEMENT )	
				,AMT_NET_ORDER_CONTRIBUTION_EST_EUR = AMT_NET_ORDER_VALUE_EST_EUR - (CASE WHEN [VL_ITEM_QUANTITY] <> 0 
														THEN (VL_NET_ORDER_QUANTITY) * (ISNULL([AMT_MEK_HEDGING_EUR],0)) 	ELSE 0 END)																			
				,AMT_REPACKAGING_EST_EUR = AMT_PACKAGING_EUR*AMT_FEE_PER_UNIT_2
				,AMT_ASL_EST_EUR = AMT_ASL_EST_EUR_PRECALC * ISNULL((VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)			
				,AMT_SWE_TAX_EST_EUR = CASE WHEN (AMT_TAX_KG_SEK*VL_GROSS_WEIGHT*0.7/1000)> AMT_TAX_CAP_SEK
					  THEN AMT_TAX_CAP_SEK*SEK_RATE*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST)
					  ELSE Isnull(SEK_RATE*VL_GROSS_WEIGHT*0.7/1000*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST)*AMT_TAX_KG_SEK,0)
				END 
				,AMT_DEPRECIATION_EST_EUR = 0--VL_REFUNDED_QUANTITY_EST*AMT_DEPRECIATIONEST_PRECALC_EUR 

		FROM CTE_SALES_L4 sales
	)
	,CTE_SALES_L6 AS 
	(
		SELECT sales.*
				 ,AMT_SHOP_MARKETING_EUR =  CASE WHEN [CD_CHANNEL_GROUP_3] <> 'Amazon' THEN AMT_NET_ORDER_VALUE_EST_EUR * PCT_MKT_RATE ELSE 0 END
				 ,AMT_AMAZON_MARKETING_COSTS_EUR = CASE WHEN [CD_CHANNEL_GROUP_3] = 'Amazon' THEN AMT_NET_ORDER_VALUE_EST_EUR * PCT_MKT_RATE ELSE 0 END
				 ,AMT_PC0_EST_EUR = (AMT_REVENUE_EST_EUR - AMT_NET_PRODUCT_COST_EST_EUR - (VL_REPLACEMENTPRODUCTCOSTEST_PRECAL_EUR * AMT_NET_PRODUCT_COST_EST_EUR))
				 ,AMT_FULFILLMENT_OUTBOUND_EST_EUR = (isnull(AMT_SHIPPING_COSTS_INVOICED_EST_EUR,0)+isnull(AMT_SHIPPING_COSTS_RETURNED_EST_EUR,0)+isnull(AMT_SHIPPING_COSTS_REPLACED_EST_EUR,0))										        
				 ,AMT_REPLACEMENT_PRODUCT_COST_EST_EUR = (VL_REPLACEMENTPRODUCTCOSTEST_PRECAL_EUR * AMT_NET_PRODUCT_COST_EST_EUR)																	
		         ,AMT_PACKAGING_COST_ES_EST_EUR = ISNULL(AMT_PACKAGING_COST_ES_EST_PRECALC *(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
				 ,AMT_PACKAGING_COST_DE_EST_EUR = ISNULL(AMT_PACKAGING_COST_DE_EST_PRECALC *(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
		         ,AMT_ABJ_EST_EUR = ISNULL(AMT_ABJ_EST_EUR_PRECALC*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)			
			     ,AMT_PACKAGING_COST_FRA_EST_EUR = (ISNULL(AMT_PACKAGING_COST_FRA_EST_PRECALC,0)+ISNULL(VL_CSU_FEE,0))*ISNULL(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST,0) 
				 ,AMT_PRODUCT_LICENSES_EST = (ISNULL(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST,0) * ISNULL(AMT_PRODUCT_LICENSES_EST_PRECAL,0)
													   + CASE WHEN [CD_COUNTRY_GROUP] = 'PL' THEN ISNULL(AMT_REVENUE_EST_EUR,0)*ISNULL([GEMA PL],0) ELSE 0 END
													   + ISNULL(AMT_NET_ORDER_VALUE_EST_EUR,0)*ISNULL(AIRTAG,0)
													   )
																																						
				 ,AMT_TEXTILE_EST_EUR = ISNULL(AMT_TEXTILE_EST_EUR_PRECALC*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)		
				 ,AMT_WEE_EST_EUR = ISNULL(AMT_FEE_PER_UNIT_WEE * WEE_FX_RATE * (VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
										+ 
									   ISNULL(AMT_WEE_PRECALC *(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
				 ,AMT_TARIF_HT_FURNITURE_EST_EUR = AMT_TARIF_HT_FURNITURE_PRECALC * (VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST)			
				 ,AMT_BATTERIES_EST_EUR = ISNULL(AMT_FEE_PER_UNIT_BATTERIES_PRECALC*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
											+
											ISNULL(AMT_FEE_PER_WEIGHT_BATTERIES_PRECALC*(VL_NET_ORDER_QUANTITY - VL_RETURNED_QUANTITY_EST + VL_REPLACEMENT_ORDER_QUANTITY_EST),0)
																																																																																						
		
		FROM CTE_SALES_L5 sales
	)
	,
	CTE_SALES_L7 AS 
	(
		SELECT sales.*
				 ,AMT_PC1_EST_EUR = (AMT_PC0_EST_EUR - AMT_COGS_OPERATIONS_EST) 
				 FROM CTE_SALES_L6 sales
	)
	,
	CTE_SALES_L8 AS 
	(
		SELECT sales.*
				,AMT_ENVIRO_AND_LICENSE_COST_EST_EUR = (ISNULL(AMT_PACKAGING_COST_DE_EST_EUR,0)+ ISNULL(AMT_PACKAGING_COST_ES_EST_EUR,0)+ ISNULL(AMT_PACKAGING_COST_FRA_EST_EUR,0) + ISNULL(AMT_ABJ_EST_EUR,0) + ISNULL(AMT_PRODUCT_LICENSES_EST,0) + ISNULL(AMT_TEXTILE_EST_EUR,0) + ISNULL(AMT_WEE_EST_EUR,0) + ISNULL(AMT_TARIF_HT_FURNITURE_EST_EUR,0) + ISNULL(AMT_BATTERIES_EST_EUR,0) + ISNULL(AMT_REPACKAGING_EST_EUR,0) + ISNULL(AMT_ASL_EST_EUR,0) + ISNULL(AMT_SWE_TAX_EST_EUR,0))
		FROM CTE_SALES_L7 sales
	)
	,CTE_SALES_L9 AS 
	(
		SELECT sales.*
						,AMT_PC2_EST_EUR = CASE WHEN NUM_ITEM NOT LIKE '9%' THEN
											(AMT_PC1_EST_EUR - 
											(ISNULL(AMT_HANDLING_INBOUND_EST_EUR,0)+ISNULL(AMT_HANDLING_TRANS_SHIPPMENT_EST_EUR,0)+ISNULL(AMT_HANDLING_RETURNS_EST_EUR,0)+ISNULL(AMT_TRUCKING_TRANS_SHIPMENT_EST_EUR,0)+ISNULL(AMT_WAREHOUSING_FBA_EUR,0))	---FulfilmentInbound
											-ISNULL(AMT_FULFILLMENT_OUTBOUND_EST_EUR,0)
											- (ISNULL(AMT_COMMISSIONS_MARKETPLACES_EUR,0)-ISNULL(AMT_COMMISSIONS_MARKETPLACES_REFUNDS_EUR,0)+ISNULL(AMT_COMMISSIONS_AMAZON_EUR,0)-ISNULL(AMT_COMMISSIONS_AMAZON_REFUNDS_EUR,0)) ---Commissions
											- (ISNULL(AMT_MARKETING_MARKETPLACES_EST_EUR,0)+ISNULL(AMT_SHOP_MARKETING_EUR,0)+ISNULL(AMT_AMAZON_MARKETING_COSTS_EUR,0)) --Marketing Performance - still missing amazon marketing 713
											- (ISNULL(AMT_CS_HANDLING_CLAIMS_EUR,0)) 
											- (ISNULL(AMT_PACKAGING_EUR,0))
											- (ISNULL(AMT_HANDLING_ORDERS_EST_EUR,0)) 
											- (ISNULL(AMT_PAYMENTS_EUR,0)) 
										- AMT_ENVIRO_AND_LICENSE_COST_EST_EUR)  ELSE AMT_PC1_EST_EUR END 
		FROM CTE_SALES_L8 sales
	)
	,
	CTE_SALES_L10 AS 
	(
		SELECT sales.*
				 ,AMT_PC3_EST_EUR = CASE WHEN NUM_ITEM NOT LIKE '9%' THEN
				 (AMT_PC2_EST_EUR - ISNULL(AMT_WAREHOUSING_RENT_EST_EUR,0) - ISNULL(AMT_WAREHOUSING_OPEX_EST_EUR,0) - ISNULL(AMT_CS_MANAGEMENT_EST_EUR,0)
						- ISNULL(AMT_MARKETING_FIXED_COST_EST_EUR,0)
					)   ELSE AMT_PC1_EST_EUR END		
		FROM CTE_SALES_L9 sales
	)
INSERT INTO L1.[L1_FACT_F_BUSINESS_PLAN_KPI_CALCULATION]
(
	 D_SNAPSHOT
	 ,CD_SOURCE
	,ID_COMPANY
	,D_TARGET
	,PCT_QTY
	,PCT_PRICE
	,ID_ITEM
	,ID_ITEM_BUSINESS_PLAN
	,CD_FULFILLMENT
	,T_REVISED_LOCATION
	,CD_COUNTRY_GROUP
	,CD_CHANNEL_GROUP_3
	,CD_CURRENCY
	,VL_ITEM_QUANTITY
	,VL_BASE_ITEM_QUANTITY
	,AMT_PLAN_PRICE_EUR
	,AMT_BASE_PLAN_PRICE_EUR
	,AMT_SHIPPING_COST_EST_EUR
	,AMT_MEK_HEDGING_EUR
	,AMT_GTS_MARKUP_EUR
	---kpi--QTY
	,VL_CANCELLED_ORDERS_QUANTITY_EST
	,VL_NET_ORDER_QUANTITY
	,VL_REFUNDED_QUANTITY_EST
	,VL_RETURNED_QUANTITY_EST
	,VL_REPLACEMENT_ORDER_QUANTITY_EST
	--KPI's Amount
	,AMT_GROSS_ORDER_VALUE_EUR
	,AMT_CANCELLED_ORDER_VALUE_EST_EUR
	,AMT_NET_ORDER_VALUE_EST_EUR
	,AMT_BASE_NET_ORDER_VALUE_EST_EUR
	,AMT_REFUNDED_ORDER_VALUE_EST_EUR	
	,AMT_REVENUE_EST_EUR
	,AMT_DEPRECIATION_EST_EUR
	,AMT_NET_PRODUCT_COST_EST_EUR
	,AMT_PC0_EST_EUR
	,AMT_COGS_OPERATIONS_EST
	,AMT_PC1_EST_EUR
	,AMT_PACKAGING_EUR
	,AMT_HANDLING_ORDERS_EST_EUR
	,AMT_HANDLING_INBOUND_EST_EUR
	,AMT_HANDLING_TRANS_SHIPPMENT_EST_EUR
	,AMT_TRUCKING_TRANS_SHIPMENT_EST_EUR
	,AMT_HANDLING_RETURNS_EST_EUR
	,AMT_WAREHOUSING_FBA_EUR
	,AMT_FULFILLMENT_OUTBOUND_EST_EUR
	,AMT_COMMISSIONS_MARKETPLACES_EUR
	,AMT_COMMISSIONS_MARKETPLACES_REFUNDS_EUR
	,AMT_MARKETING_MARKETPLACES_EST_EUR
	,AMT_COMMISSIONS_AMAZON_EUR
	,AMT_COMMISSIONS_AMAZON_REFUNDS_EUR
	,AMT_SHOP_MARKETING_EUR
	,AMT_CS_HANDLING_CLAIMS_EUR
	,AMT_PAYMENTS_EUR
	,AMT_AMAZON_MARKETING_COSTS_EUR
	,AMT_ENVIRO_AND_LICENSE_COST_EST_EUR
	,AMT_PC2_EST_EUR
	,AMT_WAREHOUSING_RENT_EST_EUR
	,AMT_WAREHOUSING_OPEX_EST_EUR
	,AMT_CS_MANAGEMENT_EST_EUR
	,AMT_MARKETING_FIXED_COST_EST_EUR
	,AMT_NET_ORDER_CONTRIBUTION_EST_EUR
	,AMT_PC3_EST_EUR
	--- final
	,[DT_DWH_CREATED]
	,[DT_DWH_UPDATED]

)
SELECT
	 D_SNAPSHOT
	,CD_SOURCE
	,ID_COMPANY
	,D_TARGET
	,@QTY_RATIO
	,@PLAN_PRICE_RATIO
	,ID_ITEM
	,ID_ITEM_BUSINESS_PLAN
	,CD_FULFILLMENT
	,T_REVISED_LOCATION
	,CD_COUNTRY_GROUP
	,CD_CHANNEL_GROUP_3
	,CD_CURRENCY
	,VL_ITEM_QUANTITY 
	,VL_BASE_ITEM_QUANTITY = VL_ITEM_QUANTITY_ORI
	,AMT_PLAN_PRICE_EUR
	,AMT_BASE_PLAN_PRICE_EUR = AMT_PLAN_PRICE_EUR_ORI
	,AMT_SHIPPING_COST_EST_EUR
	,AMT_MEK_HEDGING_EUR
	,AMT_GTS_MARKUP_EUR
	---kpi--QTY
	,VL_CANCELLED_ORDERS_QUANTITY_EST
	,VL_NET_ORDER_QUANTITY
	,VL_REFUNDED_QUANTITY_EST
	,VL_RETURNED_QUANTITY_EST
	,VL_REPLACEMENT_ORDER_QUANTITY_EST
	--KPI's Amount
	,AMT_GROSS_ORDER_VALUE_EUR
	,AMT_CANCELLED_ORDER_VALUE_EST_EUR
	,AMT_NET_ORDER_VALUE_EST_EUR
	,AMT_BASE_NET_ORDER_VALUE_EST_EUR = AMT_TARGET_NET_ORDER_VALUE_EUR_ORI
	,AMT_REFUNDED_ORDER_VALUE_EST_EUR	
	,AMT_REVENUE_EST_EUR
	,AMT_DEPRECIATION_EST_EUR
	,AMT_NET_PRODUCT_COST_EST_EUR
	,AMT_PC0_EST_EUR
	,AMT_COGS_OPERATIONS_EST
	,AMT_PC1_EST_EUR
	,AMT_PACKAGING_EUR
	,AMT_HANDLING_ORDERS_EST_EUR
	,AMT_HANDLING_INBOUND_EST_EUR
	,AMT_HANDLING_TRANS_SHIPPMENT_EST_EUR
	,AMT_TRUCKING_TRANS_SHIPMENT_EST_EUR
	,AMT_HANDLING_RETURNS_EST_EUR
	,AMT_WAREHOUSING_FBA_EUR
	,AMT_FULFILLMENT_OUTBOUND_EST_EUR
	,AMT_COMMISSIONS_MARKETPLACES_EUR
	,AMT_COMMISSIONS_MARKETPLACES_REFUNDS_EUR
	,AMT_MARKETING_MARKETPLACES_EST_EUR
	,AMT_COMMISSIONS_AMAZON_EUR
	,AMT_COMMISSIONS_AMAZON_REFUNDS_EUR
	,AMT_SHOP_MARKETING_EUR
	,AMT_CS_HANDLING_CLAIMS_EUR
	,AMT_PAYMENTS_EUR
	,AMT_AMAZON_MARKETING_COSTS_EUR
	,AMT_ENVIRO_AND_LICENSE_COST_EST_EUR
	,AMT_PC2_EST_EUR
	,AMT_WAREHOUSING_RENT_EST_EUR
	,AMT_WAREHOUSING_OPEX_EST_EUR
	,AMT_CS_MANAGEMENT_EST_EUR
	,AMT_MARKETING_FIXED_COST_EST_EUR
	,AMT_NET_ORDER_CONTRIBUTION_EST_EUR
	,AMT_PC3_EST_EUR
	--- final
	,GETDATE()
	,GETDATE()
FROM CTE_SALES_L10

